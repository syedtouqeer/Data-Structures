#include<stdio.h>
 
void DFS(int);
int a[20][20],visited[20],n, q[20],i, j, f = 0, r = -1;
void bfs(int v) {
    for(i = 1; i <= n; i++)
        if(a[v][i] && !visited[i])
            q[++r] = i;
    if(f <= r) {
        visited[q[f]] = 1;
        bfs(q[f++]);
    }
}
void main()
{
    int v,c;
    printf("GRAPH TRAVERSAL \n");
    printf("1. DFS \n 2. BFS");
    printf("Enter choice");
    scanf("%d",&c);
    switch(c)
    {
            case 1: printf("Enter number of vertices:");
   
                    scanf("%d",&n);
 
                    //read the adjecency matrix
                    printf("\nEnter adjecency matrix of the graph:");
   
                    for(i=0;i<n;i++)
                     for(j=0;j<n;j++)
                        scanf("%d",&a[i][j]);
 
                        //visited is initialized to zero
                       for(i=0;i<n;i++)
                            visited[i]=0;
                     
                        DFS(0);
                        break;
            case 2: 
                    printf("\n Enter the number of vertices:");
                    scanf("%d", &n);
                    
                    for(i=1; i <= n; i++) {
                        q[i] = 0;
                        visited[i] = 0;
                    }
                    
                    printf("\n Enter graph data in matrix form:\n");
                    for(i=1; i<=n; i++) {
                        for(j=1;j<=n;j++) {
                            scanf("%d", &a[i][j]);
                        }
                    }
                    
                    printf("\n Enter the starting vertex:");
                    scanf("%d", &v);
                    bfs(v);
                    printf("\n The node which are reachable are:\n");
                    
                    for(i=1; i <= n; i++) {
                        if(visited[i])
                            printf("%d\t", i);
                        else {
                            printf("\n Bfs is not possible. Not all nodes are reachable");
                            break;
                        }
                    }
                    break;
        }
    
}
void DFS(int i)
{
    printf("%d -->",i);
    visited[i]=1;
    
    for(j=0;j<n;j++)
     {  if(!visited[j]&&a[i][j]==1)
            DFS(j);
}
}
